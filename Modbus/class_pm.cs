/*****************************************************************************
 * File generated by HDevelop Version 19.11
 *
 * Do not modify!
 *****************************************************************************/

using System;
using System.IO;
using HalconDotNet;


/*
 * If you use this class in your program, you have to 
 * link against hdevenginedotnet.dll and halcondotnet.dll.
 * The Dlls are located in ${HALCONROOT}/bin/dotnet[20|35].
 *
 * The wrapped .hdev or .hdpl files have to be located in the folder
 * that is specified in the static ResourcePath property of 
 * class_pm. 
 * By default, ResourcePath is ${binary_dir}/res_class_pm.
 *
 * It is recommended to compile an assembly from this file using
 * the generated CMakeLists.txt.
 */

namespace class_ns
{
  public static class class_pm
  {

    public static void astart_classfication(
        out HTuple ClassificationClassID)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _astart_classfication.Value.CreateCall())
      {
        call.Execute();
        ClassificationClassID = GetParameterHTuple(call,"ClassificationClassID");
      }
    }

    public static void check_data_availability(
        HTuple ExampleDataDir,
        HTuple PreprocessParamFileName,
        HTuple TrainedModelFileName,
        HTuple UsePretrainedModel)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _check_data_availability.Value.CreateCall())
      {
        SetParameter(call,"ExampleDataDir",ExampleDataDir);
        SetParameter(call,"PreprocessParamFileName",PreprocessParamFileName);
        SetParameter(call,"TrainedModelFileName",TrainedModelFileName);
        SetParameter(call,"UsePretrainedModel",UsePretrainedModel);
        call.Execute();
      }
    }

    public static void dev_close_example_image_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_image_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_legend_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_legend_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_text_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_text_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_close_example_windows(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_close_example_windows.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_example_reset_windows(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_example_reset_windows.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_model_output_image(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_model_output_image.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_pills_example_dataset_preview(
    )
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_pills_example_dataset_preview.Value.CreateCall())
      {
        call.Execute();
      }
    }

    public static void dev_display_preprocessed_image(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_preprocessed_image.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_raw_image(
        HTuple WindowHandleImages)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_raw_image.Value.CreateCall())
      {
        SetParameter(call,"WindowHandleImages",WindowHandleImages);
        call.Execute();
      }
    }

    public static void dev_display_screen_example_images(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_example_images.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_final(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_final.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_inference_step_1(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_inference_step_1.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_inference_step_2(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_inference_step_2.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_inference_step_3(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_inference_step_3.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_introduction(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_introduction.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_display_screen_run_program(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_display_screen_run_program.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_example_init(
        HTuple ShowExampleScreens,
        HTuple UsePretrainedModel,
        out HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_example_init.Value.CreateCall())
      {
        SetParameter(call,"ShowExampleScreens",ShowExampleScreens);
        SetParameter(call,"UsePretrainedModel",UsePretrainedModel);
        call.Execute();
        ExampleInternals = GetParameterHTuple(call,"ExampleInternals");
      }
    }

    public static void dev_open_example_image_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_image_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void dev_open_example_legend_window(
        HTuple ExampleInternals,
        HTuple WindowWidth)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_legend_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        SetParameter(call,"WindowWidth",WindowWidth);
        call.Execute();
      }
    }

    public static void dev_open_example_text_window(
        HTuple ExampleInternals)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _dev_open_example_text_window.Value.CreateCall())
      {
        SetParameter(call,"ExampleInternals",ExampleInternals);
        call.Execute();
      }
    }

    public static void get_example_inference_images(
        HTuple ImageDir,
        out HTuple ImageFiles)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_example_inference_images.Value.CreateCall())
      {
        SetParameter(call,"ImageDir",ImageDir);
        call.Execute();
        ImageFiles = GetParameterHTuple(call,"ImageFiles");
      }
    }

    public static void get_example_inference_images_COPY_1(
        HTuple ImageDir,
        out HTuple ImageFiles)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _get_example_inference_images_COPY_1.Value.CreateCall())
      {
        SetParameter(call,"ImageDir",ImageDir);
        call.Execute();
        ImageFiles = GetParameterHTuple(call,"ImageFiles");
      }
    }

    public static void start_classification(
        HObject start,
        out HTuple ClassificationLabelIDResult)
    {     
      AddResourcePathToProcedurePath();
      using (HDevProcedureCall call = _start_classification.Value.CreateCall())
      {
        SetParameter(call,"start",start);
        call.Execute();
        ClassificationLabelIDResult = GetParameterHTuple(call,"ClassificationLabelIDResult");
      }
    }


    /****************************************************************************
    * ResourcePath
    *****************************************************************************
    * Use ResourcePath in your application to specify the location of the 
    * HDevelop script or procedure library.
    *****************************************************************************/
    public static string ResourcePath
    {
      get
      {
        return _resource_path;
      }
      set
      {
        lock(_procedure_path_lock)
        {
          _procedure_path_initialized = false;
        }
        _resource_path = value;
      }
    }

#region Implementation details

    /* Implementation details of the wrapper class.
     * You do not have to use these functions ever.
     */

    private static bool _procedure_path_initialized = false;
    private static object _procedure_path_lock = new object();

    private static string _resource_path = "./res_class_pm";

    private static Lazy<HDevProgram> _Program
            = new Lazy<HDevProgram>(() => new HDevProgram(Path.Combine(class_pm.ResourcePath, "Classify.hdev")));
    private static Lazy<HDevProcedure> _astart_classfication
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "astart_classfication"));
    private static Lazy<HDevProcedure> _check_data_availability
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "check_data_availability"));
    private static Lazy<HDevProcedure> _dev_close_example_image_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_image_window"));
    private static Lazy<HDevProcedure> _dev_close_example_legend_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_legend_window"));
    private static Lazy<HDevProcedure> _dev_close_example_text_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_text_window"));
    private static Lazy<HDevProcedure> _dev_close_example_windows
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_close_example_windows"));
    private static Lazy<HDevProcedure> _dev_display_example_reset_windows
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_example_reset_windows"));
    private static Lazy<HDevProcedure> _dev_display_model_output_image
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_model_output_image"));
    private static Lazy<HDevProcedure> _dev_display_pills_example_dataset_preview
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_pills_example_dataset_preview"));
    private static Lazy<HDevProcedure> _dev_display_preprocessed_image
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_preprocessed_image"));
    private static Lazy<HDevProcedure> _dev_display_raw_image
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_raw_image"));
    private static Lazy<HDevProcedure> _dev_display_screen_example_images
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_example_images"));
    private static Lazy<HDevProcedure> _dev_display_screen_final
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_final"));
    private static Lazy<HDevProcedure> _dev_display_screen_inference_step_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_inference_step_1"));
    private static Lazy<HDevProcedure> _dev_display_screen_inference_step_2
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_inference_step_2"));
    private static Lazy<HDevProcedure> _dev_display_screen_inference_step_3
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_inference_step_3"));
    private static Lazy<HDevProcedure> _dev_display_screen_introduction
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_introduction"));
    private static Lazy<HDevProcedure> _dev_display_screen_run_program
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_display_screen_run_program"));
    private static Lazy<HDevProcedure> _dev_example_init
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_example_init"));
    private static Lazy<HDevProcedure> _dev_open_example_image_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_image_window"));
    private static Lazy<HDevProcedure> _dev_open_example_legend_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_legend_window"));
    private static Lazy<HDevProcedure> _dev_open_example_text_window
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "dev_open_example_text_window"));
    private static Lazy<HDevProcedure> _get_example_inference_images
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_example_inference_images"));
    private static Lazy<HDevProcedure> _get_example_inference_images_COPY_1
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "get_example_inference_images_COPY_1"));
    private static Lazy<HDevProcedure> _start_classification
            = new Lazy<HDevProcedure>(() => new HDevProcedure(_Program.Value, "start_classification"));
        
    private static HTuple GetParameterHTuple(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamTuple(name);
    }

    private static HObject GetParameterHObject(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamObject(name);
    }

    private static HTupleVector GetParameterHTupleVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputCtrlParamVector(name);
    }

    private static HObjectVector GetParameterHObjectVector(HDevProcedureCall call, string name)
    {
      return call.GetOutputIconicParamVector(name);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTuple tuple)
    {
      call.SetInputCtrlParamTuple(name,tuple);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObject obj)
    {
      call.SetInputIconicParamObject(name,obj);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HTupleVector vector)
    {
      call.SetInputCtrlParamVector(name,vector);
    }

    private static void SetParameter(HDevProcedureCall call, string name, HObjectVector vector)
    {
      call.SetInputIconicParamVector(name,vector);
    }

    private static void AddResourcePathToProcedurePath() 
    {
      lock(_procedure_path_lock)
      {
        if(!_procedure_path_initialized)
        {
          new HDevEngine().AddProcedurePath(ResourcePath);
          _procedure_path_initialized = true;
        }
      }
    }

#endregion

}
}